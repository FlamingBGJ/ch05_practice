# -*- coding: utf-8 -*-
"""ch05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJAvXLt7dFrZ4ZQdkiqwJMB1jXbOBU7J
"""

def calculator(N):
  if N%2 == 0:
    result = 1
    for i in range(1,N+1):
      result = result*i
  else:
    result = 0
    for i in range(1,N+1):
      result=result+i
  return result

print(calculator(4))

num = ['12','34','56']
for i in num:
  i = int(i)
print(num)

first_value = 0
second_value = 0
for i in range(1,10):
  if i is 5:
    continue
    first_value = i
  if i is 10:
    break
    second_value = i
print(first_value+second_value)

num=""
for i in range(10):
  if i <= 5 and (i%2)==0:
    continue
  elif i is 7 or i is 10:
    continue
  else:
    num = str(i)+num
print(num)

def work_status(task,worker,day):
  rest_task = task
  for k in range(day+1):
    if rest_task > 0:
      rest_task = rest_task - worker
    else:
      print("Task end")
      break
  if rest_task > 0:
    print("Hire more workers")

work_status(100,11,10)

score_list = [5, 10, 15, 20, 25, 30]

sum_of_score = 0
i = 0
while i < len(score_list):
  if i % 2 ==0:
    sum_of_score+=score_list[i]
  i+=1
print(sum_of_score)

coupon = 0
money = 200000
cofee = 3500
while money > cofee:
  if coupon < 4:
    money = money - cofee
    coupon+=1
  else:
    money+=2800
    coupon = 0
print(money)

a = "369"
b = "963"

strike =0
ball = 0

for number in a:
  if b.count(number) >= 1:
    if b.find(number) == a.find(number):
      strike +=1
    else:
      ball += 1
  else:
    continue

print("Strike :",strike,"Ball",ball)

블럭ㅇlist_data_a = [1,2]
list_data_b = [3,4]

for i in list_data_a:
  for j in list_data_b:
    result = i + j
print(result)

list_1 = [[1,2],[3],[4,5,6]]
a,b,c = list_1
list_2=a+b+c
print(list_2)

"""#함수
- 코드블럭의 반복실행을 위해 정의
- 단지 반복실행의 가능성을 위해서만 정의하지는 않는다.
- 코드블럭의 논리적인 분리를 위해 사용하기도 한다.

```
def <function_name>(params):
  <action1>
  <action2>
  return<return_value>
```
"""

# 함수는 다른 함수를 호출할 수 있다.
def sum(a,b):
  return a + b

def sumabs(a,b):
  c = sum(a,b)
  d = abs(c)
  return(d)

sumabs(1,-4)

list_1 = []
list_2 = list_1.append(4)

list_1

list_2

# 연습문제

def triangle_V(a,b):
  c = a*b*(1/2)
  return(c)

def triangle_area():
  triangle_bot = int(input("삼각형의 밑변 : "))
  triangle_height =  int(input("삼각형의 높이 : "))
  print(f"삼각형의 넓이는 {triangle_V(triangle_bot,triangle_height)} 입니다.")

triangle_area()

def myavg(a,b):
  c = (a + b)/2
  return(c)

myavg(1,2)

def and_fun(a,b):
  if a==1:
    if b==1:
      return(1)
    else:
      return(0)
  else:
    return(0)

def and_fun_2(a,b):
  if 0 not in (a,b):
    return(1)
  else:
    return(0)

and_fun(1,1)

def or_fun(a,b):
  if a==0:
    if b==0:
      return(0)
    else:
      return(1)
  else:
    return(1)

or_fun(1,0)

def xor_fun(a,b):
  xor1 = and_fun(a, (not b))
  xor2 = and_fun(b, (not a))
  xor3 = or_fun(xor1, xor2)
  return(xor3)

xor_fun(0,0)

"""# 일급시민 함수
 - 파이썬의 모든 합수는 일급 함수이다.
 
"""

def f(g,a,b): # g는 함수 : 함수를 다른 함수에 인수로 전달 가능
  return g(a,b)

f(print, "hello","world")

f(sum, 1, 20)

"""# 한줄짜리 함수 : 람다 함수
- 람다 함수는 이름없는 한줄짜리 함수이다.
- 기본형
- 일반함수와의 차이
  - 일반 함수는 정의와 동시에 객체로서 사용할 수 있다.
```
lambda<인수들> : <반환항식>
```
"""

lam_1 = lambda x, y : x+y

lam_1(1,2)

"""#변수의 유효범위
- 변수가 어느 범위에서 유효한지를 나타낸다.
- 변수가 함수 내부에서 정의되면 local 변수
- 변수가 함수 외부에서 정의되면 해당 모듈의 Global  변수가 된다.

- 천역변수 : 함수 외부에서 정의된 변수. 코드의 모든 범위에서 적용된다.
- 지역변수 : 함수 내부에서 정의된 변수. 해당 정의된 함수에서만 사용가능
- 함수에서 변수를 호출하는 순서는 : 지역변수 -> 전역변수

#지역변수
"""

str_1 = "global_val"
def func_1():
  str_1 = "local_val"
  print(str_1)

func_1()

"""#과제"""

city = []
def add_city(x):
  city_a = input("도시를 영어로 입력하세요 : ")
  x.append(city_a)
def el3(y):
  extract = []
  for i in range(0,len(y)):
    extract.append(y[i][0:3])
  return(extract)
def acq(z):
  que = ""
  while True:
    que = input("도시를 추가하시겠습니까?(y/n) : ")
    if que == 'y':
      add_city(z)
    elif que == 'n':
      print("도시 입력을 종료하고 결과를 출력합니다.\n")
      break
    else:
      print("y 또는 n 만 입력해주세요.")
      continue
  return(el3(z))

city=[]
acq(city)

list_score = []
def add_sub(a):
  temp_list = []
  temp_list.append(input("과목 : "))
  temp_list.append(input("점수 : "))
  a.append(temp_list)
  return(a)

def print_score(b):
  for i in range(0,len(b)):
    print(f"{b[i][0]} : {b[i][1]}\n")

def score_register(c):
  while True:
    que = input("과목을 추가하시겠습니까?(예/아니오) : ")
    if que == '예':
      add_sub(c)
    elif que == '아니오':
      print("과목 입력을 종료하고 결과를 출력합니다.\n")
      break
    else:
      print("예 또는 아니오 만 입력해주세요.")
      continue
  print_score(c)
  return(c)

list_score = []
score_register(list_score)

